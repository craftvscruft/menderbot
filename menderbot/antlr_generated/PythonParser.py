# Generated from PythonParser.g4 by ANTLR 4.13.0
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,100,970,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,1,
        0,1,0,1,0,3,0,122,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,131,8,1,1,
        2,1,2,4,2,135,8,2,11,2,12,2,136,1,3,1,3,5,3,141,8,3,10,3,12,3,144,
        9,3,1,4,1,4,3,4,148,8,4,1,5,1,5,1,5,1,5,1,5,5,5,155,8,5,10,5,12,
        5,158,9,5,1,5,3,5,161,8,5,1,5,1,5,1,5,1,5,1,5,3,5,168,8,5,1,5,3,
        5,171,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,180,8,5,1,5,1,5,1,5,1,
        5,4,5,186,8,5,11,5,12,5,187,1,5,3,5,191,8,5,1,5,3,5,194,8,5,1,5,
        3,5,197,8,5,1,5,3,5,200,8,5,1,5,1,5,1,5,1,5,5,5,206,8,5,10,5,12,
        5,209,9,5,1,5,1,5,1,5,1,5,5,5,215,8,5,10,5,12,5,218,9,5,1,5,1,5,
        3,5,222,8,5,3,5,224,8,5,1,6,1,6,1,6,1,6,4,6,230,8,6,11,6,12,6,231,
        1,6,1,6,3,6,236,8,6,1,7,1,7,1,7,1,7,3,7,242,8,7,1,7,3,7,245,8,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,3,11,265,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,3,12,279,8,12,3,12,281,8,12,1,12,1,12,1,
        12,1,13,1,13,1,13,1,13,3,13,290,8,13,1,13,3,13,293,8,13,1,13,1,13,
        1,13,1,14,3,14,299,8,14,1,14,1,14,1,14,1,14,3,14,305,8,14,1,14,1,
        14,1,14,3,14,310,8,14,1,14,1,14,1,14,1,15,1,15,1,15,3,15,318,8,15,
        1,15,1,15,1,15,3,15,323,8,15,1,15,1,15,3,15,327,8,15,1,15,3,15,330,
        8,15,1,15,3,15,333,8,15,1,15,1,15,3,15,337,8,15,3,15,339,8,15,1,
        16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,5,18,350,8,18,10,18,12,
        18,353,9,18,1,19,1,19,1,19,3,19,358,8,19,1,19,3,19,361,8,19,1,20,
        1,20,1,20,3,20,366,8,20,1,21,1,21,1,21,5,21,371,8,21,10,21,12,21,
        374,9,21,1,21,3,21,377,8,21,1,21,1,21,1,22,1,22,3,22,383,8,22,1,
        22,1,22,1,22,1,22,1,22,5,22,390,8,22,10,22,12,22,393,9,22,1,22,3,
        22,396,8,22,1,22,1,22,1,22,1,22,4,22,402,8,22,11,22,12,22,403,1,
        22,3,22,407,8,22,3,22,409,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,3,22,420,8,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,428,8,
        22,3,22,430,8,22,3,22,432,8,22,1,22,1,22,3,22,436,8,22,1,22,1,22,
        1,22,1,22,1,22,5,22,443,8,22,10,22,12,22,446,9,22,1,22,1,22,4,22,
        450,8,22,11,22,12,22,451,3,22,454,8,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,3,22,463,8,22,1,22,1,22,1,22,1,22,5,22,469,8,22,10,22,
        12,22,472,9,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,481,8,22,
        3,22,483,8,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,491,8,22,1,22,1,
        22,1,22,1,22,1,22,5,22,498,8,22,10,22,12,22,501,9,22,1,22,1,22,3,
        22,505,8,22,1,23,1,23,3,23,509,8,23,1,23,1,23,4,23,513,8,23,11,23,
        12,23,514,1,23,1,23,3,23,519,8,23,1,23,3,23,522,8,23,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,5,25,531,8,25,10,25,12,25,534,9,25,1,25,1,
        25,3,25,538,8,25,1,25,3,25,541,8,25,1,25,1,25,1,25,1,25,1,25,3,25,
        548,8,25,1,25,1,25,1,25,1,25,1,25,3,25,555,8,25,3,25,557,8,25,1,
        26,1,26,1,26,5,26,562,8,26,10,26,12,26,565,9,26,1,26,3,26,568,8,
        26,1,27,1,27,1,27,5,27,573,8,27,10,27,12,27,576,9,27,1,27,3,27,579,
        8,27,1,28,1,28,1,28,3,28,584,8,28,1,29,1,29,1,29,5,29,589,8,29,10,
        29,12,29,592,9,29,1,30,1,30,1,30,3,30,597,8,30,1,31,1,31,1,31,1,
        31,1,31,1,31,3,31,605,8,31,1,31,1,31,3,31,609,8,31,1,31,1,31,3,31,
        613,8,31,1,32,1,32,1,32,3,32,618,8,32,1,32,1,32,1,32,3,32,623,8,
        32,1,32,1,32,3,32,627,8,32,1,32,3,32,630,8,32,1,32,3,32,633,8,32,
        1,32,1,32,3,32,637,8,32,3,32,639,8,32,1,33,1,33,1,33,5,33,644,8,
        33,10,33,12,33,647,9,33,1,34,1,34,1,34,3,34,652,8,34,1,34,3,34,655,
        8,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,3,37,667,
        8,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,675,8,37,10,37,12,37,678,
        9,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        3,38,692,8,38,1,38,1,38,1,38,3,38,697,8,38,3,38,699,8,38,1,38,5,
        38,702,8,38,10,38,12,38,705,9,38,1,39,1,39,3,39,709,8,39,1,39,1,
        39,5,39,713,8,39,10,39,12,39,716,9,39,1,39,1,39,3,39,720,8,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,743,8,39,10,39,12,39,
        746,9,39,1,40,1,40,1,40,3,40,751,8,40,1,40,1,40,1,40,3,40,756,8,
        40,1,40,1,40,1,40,3,40,761,8,40,1,40,1,40,1,40,1,40,3,40,767,8,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,776,8,40,1,40,1,40,1,40,
        4,40,781,8,40,11,40,12,40,782,3,40,785,8,40,1,41,1,41,1,41,1,41,
        1,41,1,41,3,41,793,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
        802,8,41,5,41,804,8,41,10,41,12,41,807,9,41,1,41,3,41,810,8,41,1,
        41,1,41,1,41,1,41,1,41,1,41,3,41,818,8,41,1,42,1,42,3,42,822,8,42,
        1,42,1,42,1,42,1,42,3,42,828,8,42,5,42,830,8,42,10,42,12,42,833,
        9,42,1,42,3,42,836,8,42,3,42,838,8,42,1,43,1,43,1,43,5,43,843,8,
        43,10,43,12,43,846,9,43,1,43,3,43,849,8,43,1,44,1,44,1,44,1,44,1,
        44,1,44,5,44,857,8,44,10,44,12,44,860,9,44,1,45,1,45,1,46,1,46,1,
        46,3,46,867,8,46,1,47,1,47,1,48,1,48,3,48,873,8,48,1,49,1,49,1,49,
        3,49,878,8,49,1,50,1,50,1,50,3,50,883,8,50,1,50,3,50,886,8,50,1,
        51,1,51,3,51,890,8,51,1,51,1,51,1,51,1,51,1,51,3,51,897,8,51,1,52,
        1,52,1,52,5,52,902,8,52,10,52,12,52,905,9,52,1,52,3,52,908,8,52,
        1,53,1,53,1,53,1,53,3,53,914,8,53,1,53,1,53,3,53,918,8,53,1,54,1,
        54,1,54,5,54,923,8,54,10,54,12,54,926,9,54,1,54,3,54,929,8,54,1,
        55,1,55,1,55,1,55,3,55,935,8,55,1,55,3,55,938,8,55,3,55,940,8,55,
        1,55,1,55,3,55,944,8,55,1,55,3,55,947,8,55,3,55,949,8,55,1,56,1,
        56,3,56,953,8,56,1,57,1,57,1,57,1,57,1,57,3,57,960,8,57,1,58,1,58,
        1,58,1,58,3,58,966,8,58,3,58,968,8,58,1,58,0,4,74,76,78,88,59,0,
        2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
        48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
        92,94,96,98,100,102,104,106,108,110,112,114,116,0,10,1,1,3,3,1,0,
        41,42,1,0,70,82,2,0,55,56,60,60,3,0,44,44,57,59,68,68,1,0,55,56,
        1,0,53,54,2,0,39,40,96,96,1,0,84,87,2,0,44,44,48,48,1111,0,121,1,
        0,0,0,2,130,1,0,0,0,4,134,1,0,0,0,6,138,1,0,0,0,8,147,1,0,0,0,10,
        223,1,0,0,0,12,235,1,0,0,0,14,237,1,0,0,0,16,248,1,0,0,0,18,253,
        1,0,0,0,20,257,1,0,0,0,22,261,1,0,0,0,24,266,1,0,0,0,26,285,1,0,
        0,0,28,298,1,0,0,0,30,338,1,0,0,0,32,340,1,0,0,0,34,343,1,0,0,0,
        36,346,1,0,0,0,38,360,1,0,0,0,40,362,1,0,0,0,42,367,1,0,0,0,44,504,
        1,0,0,0,46,521,1,0,0,0,48,523,1,0,0,0,50,556,1,0,0,0,52,558,1,0,
        0,0,54,569,1,0,0,0,56,580,1,0,0,0,58,585,1,0,0,0,60,593,1,0,0,0,
        62,612,1,0,0,0,64,638,1,0,0,0,66,640,1,0,0,0,68,654,1,0,0,0,70,656,
        1,0,0,0,72,659,1,0,0,0,74,666,1,0,0,0,76,679,1,0,0,0,78,719,1,0,
        0,0,80,784,1,0,0,0,82,817,1,0,0,0,84,821,1,0,0,0,86,839,1,0,0,0,
        88,850,1,0,0,0,90,861,1,0,0,0,92,866,1,0,0,0,94,868,1,0,0,0,96,870,
        1,0,0,0,98,877,1,0,0,0,100,885,1,0,0,0,102,896,1,0,0,0,104,898,1,
        0,0,0,106,917,1,0,0,0,108,919,1,0,0,0,110,948,1,0,0,0,112,950,1,
        0,0,0,114,954,1,0,0,0,116,967,1,0,0,0,118,122,3,2,1,0,119,122,3,
        4,2,0,120,122,3,6,3,0,121,118,1,0,0,0,121,119,1,0,0,0,121,120,1,
        0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,5,0,0,1,124,1,1,0,
        0,0,125,131,5,3,0,0,126,131,3,42,21,0,127,128,3,10,5,0,128,129,5,
        3,0,0,129,131,1,0,0,0,130,125,1,0,0,0,130,126,1,0,0,0,130,127,1,
        0,0,0,131,3,1,0,0,0,132,135,5,3,0,0,133,135,3,8,4,0,134,132,1,0,
        0,0,134,133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,
        0,0,137,5,1,0,0,0,138,142,3,86,43,0,139,141,5,3,0,0,140,139,1,0,
        0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,7,1,0,0,
        0,144,142,1,0,0,0,145,148,3,42,21,0,146,148,3,10,5,0,147,145,1,0,
        0,0,147,146,1,0,0,0,148,9,1,0,0,0,149,150,5,13,0,0,150,151,3,62,
        31,0,151,152,5,46,0,0,152,156,3,12,6,0,153,155,3,16,8,0,154,153,
        1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,160,
        1,0,0,0,158,156,1,0,0,0,159,161,3,18,9,0,160,159,1,0,0,0,160,161,
        1,0,0,0,161,224,1,0,0,0,162,163,5,16,0,0,163,164,3,62,31,0,164,165,
        5,46,0,0,165,167,3,12,6,0,166,168,3,18,9,0,167,166,1,0,0,0,167,168,
        1,0,0,0,168,224,1,0,0,0,169,171,5,35,0,0,170,169,1,0,0,0,170,171,
        1,0,0,0,171,172,1,0,0,0,172,173,5,17,0,0,173,174,3,52,26,0,174,175,
        5,18,0,0,175,176,3,86,43,0,176,177,5,46,0,0,177,179,3,12,6,0,178,
        180,3,18,9,0,179,178,1,0,0,0,179,180,1,0,0,0,180,224,1,0,0,0,181,
        182,5,19,0,0,182,183,5,46,0,0,183,196,3,12,6,0,184,186,3,24,12,0,
        185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,
        188,190,1,0,0,0,189,191,3,18,9,0,190,189,1,0,0,0,190,191,1,0,0,0,
        191,193,1,0,0,0,192,194,3,20,10,0,193,192,1,0,0,0,193,194,1,0,0,
        0,194,197,1,0,0,0,195,197,3,20,10,0,196,185,1,0,0,0,196,195,1,0,
        0,0,197,224,1,0,0,0,198,200,5,35,0,0,199,198,1,0,0,0,199,200,1,0,
        0,0,200,201,1,0,0,0,201,202,5,22,0,0,202,207,3,22,11,0,203,204,5,
        45,0,0,204,206,3,22,11,0,205,203,1,0,0,0,206,209,1,0,0,0,207,205,
        1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,211,
        5,46,0,0,211,212,3,12,6,0,212,224,1,0,0,0,213,215,3,14,7,0,214,213,
        1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,221,
        1,0,0,0,218,216,1,0,0,0,219,222,3,26,13,0,220,222,3,28,14,0,221,
        219,1,0,0,0,221,220,1,0,0,0,222,224,1,0,0,0,223,149,1,0,0,0,223,
        162,1,0,0,0,223,170,1,0,0,0,223,181,1,0,0,0,223,199,1,0,0,0,223,
        216,1,0,0,0,224,11,1,0,0,0,225,236,3,42,21,0,226,227,5,3,0,0,227,
        229,5,1,0,0,228,230,3,8,4,0,229,228,1,0,0,0,230,231,1,0,0,0,231,
        229,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,234,5,2,0,0,234,
        236,1,0,0,0,235,225,1,0,0,0,235,226,1,0,0,0,236,13,1,0,0,0,237,238,
        5,68,0,0,238,244,3,88,44,0,239,241,5,90,0,0,240,242,3,104,52,0,241,
        240,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,245,5,91,0,0,244,
        239,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,5,3,0,0,247,
        15,1,0,0,0,248,249,5,14,0,0,249,250,3,62,31,0,250,251,5,46,0,0,251,
        252,3,12,6,0,252,17,1,0,0,0,253,254,5,15,0,0,254,255,5,46,0,0,255,
        256,3,12,6,0,256,19,1,0,0,0,257,258,5,21,0,0,258,259,5,46,0,0,259,
        260,3,12,6,0,260,21,1,0,0,0,261,264,3,62,31,0,262,263,5,10,0,0,263,
        265,3,78,39,0,264,262,1,0,0,0,264,265,1,0,0,0,265,23,1,0,0,0,266,
        280,5,23,0,0,267,278,3,62,31,0,268,269,4,12,0,0,269,270,5,45,0,0,
        270,271,3,90,45,0,271,272,6,12,-1,0,272,279,1,0,0,0,273,274,4,12,
        1,0,274,275,5,10,0,0,275,276,3,90,45,0,276,277,6,12,-1,0,277,279,
        1,0,0,0,278,268,1,0,0,0,278,273,1,0,0,0,278,279,1,0,0,0,279,281,
        1,0,0,0,280,267,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,283,
        5,46,0,0,283,284,3,12,6,0,284,25,1,0,0,0,285,286,5,29,0,0,286,292,
        3,90,45,0,287,289,5,90,0,0,288,290,3,104,52,0,289,288,1,0,0,0,289,
        290,1,0,0,0,290,291,1,0,0,0,291,293,5,91,0,0,292,287,1,0,0,0,292,
        293,1,0,0,0,293,294,1,0,0,0,294,295,5,46,0,0,295,296,3,12,6,0,296,
        27,1,0,0,0,297,299,5,35,0,0,298,297,1,0,0,0,298,299,1,0,0,0,299,
        300,1,0,0,0,300,301,5,4,0,0,301,302,3,90,45,0,302,304,5,90,0,0,303,
        305,3,30,15,0,304,303,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,
        309,5,91,0,0,307,308,5,69,0,0,308,310,3,62,31,0,309,307,1,0,0,0,
        309,310,1,0,0,0,310,311,1,0,0,0,311,312,5,46,0,0,312,313,3,12,6,
        0,313,29,1,0,0,0,314,315,3,36,18,0,315,316,5,45,0,0,316,318,1,0,
        0,0,317,314,1,0,0,0,317,318,1,0,0,0,318,329,1,0,0,0,319,322,3,32,
        16,0,320,321,5,45,0,0,321,323,3,36,18,0,322,320,1,0,0,0,322,323,
        1,0,0,0,323,326,1,0,0,0,324,325,5,45,0,0,325,327,3,34,17,0,326,324,
        1,0,0,0,326,327,1,0,0,0,327,330,1,0,0,0,328,330,3,34,17,0,329,319,
        1,0,0,0,329,328,1,0,0,0,330,332,1,0,0,0,331,333,5,45,0,0,332,331,
        1,0,0,0,332,333,1,0,0,0,333,339,1,0,0,0,334,336,3,36,18,0,335,337,
        5,45,0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,317,
        1,0,0,0,338,334,1,0,0,0,339,31,1,0,0,0,340,341,5,44,0,0,341,342,
        3,40,20,0,342,33,1,0,0,0,343,344,5,48,0,0,344,345,3,40,20,0,345,
        35,1,0,0,0,346,351,3,38,19,0,347,348,5,45,0,0,348,350,3,38,19,0,
        349,347,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,
        352,37,1,0,0,0,353,351,1,0,0,0,354,357,3,40,20,0,355,356,5,49,0,
        0,356,358,3,62,31,0,357,355,1,0,0,0,357,358,1,0,0,0,358,361,1,0,
        0,0,359,361,5,44,0,0,360,354,1,0,0,0,360,359,1,0,0,0,361,39,1,0,
        0,0,362,365,3,90,45,0,363,364,5,46,0,0,364,366,3,62,31,0,365,363,
        1,0,0,0,365,366,1,0,0,0,366,41,1,0,0,0,367,372,3,44,22,0,368,369,
        5,47,0,0,369,371,3,44,22,0,370,368,1,0,0,0,371,374,1,0,0,0,372,370,
        1,0,0,0,372,373,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,375,377,
        5,47,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,379,
        7,0,0,0,379,43,1,0,0,0,380,382,3,46,23,0,381,383,3,50,25,0,382,381,
        1,0,0,0,382,383,1,0,0,0,383,505,1,0,0,0,384,385,4,22,2,0,385,408,
        5,37,0,0,386,391,3,62,31,0,387,388,5,45,0,0,388,390,3,62,31,0,389,
        387,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,
        395,1,0,0,0,393,391,1,0,0,0,394,396,5,45,0,0,395,394,1,0,0,0,395,
        396,1,0,0,0,396,409,1,0,0,0,397,398,5,54,0,0,398,401,3,62,31,0,399,
        400,5,45,0,0,400,402,3,62,31,0,401,399,1,0,0,0,402,403,1,0,0,0,403,
        401,1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,407,5,45,0,0,406,
        405,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,386,1,0,0,0,408,
        397,1,0,0,0,409,410,1,0,0,0,410,411,6,22,-1,0,411,505,1,0,0,0,412,
        413,5,31,0,0,413,505,3,52,26,0,414,505,5,32,0,0,415,505,5,34,0,0,
        416,505,5,33,0,0,417,419,5,5,0,0,418,420,3,86,43,0,419,418,1,0,0,
        0,419,420,1,0,0,0,420,505,1,0,0,0,421,431,5,6,0,0,422,429,3,62,31,
        0,423,424,5,45,0,0,424,427,3,62,31,0,425,426,5,45,0,0,426,428,3,
        62,31,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,423,
        1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,422,1,0,0,0,431,432,
        1,0,0,0,432,435,1,0,0,0,433,434,5,7,0,0,434,436,3,62,31,0,435,433,
        1,0,0,0,435,436,1,0,0,0,436,505,1,0,0,0,437,505,3,96,48,0,438,439,
        5,8,0,0,439,505,3,58,29,0,440,453,5,7,0,0,441,443,7,1,0,0,442,441,
        1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,447,
        1,0,0,0,446,444,1,0,0,0,447,454,3,88,44,0,448,450,7,1,0,0,449,448,
        1,0,0,0,450,451,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,454,
        1,0,0,0,453,444,1,0,0,0,453,449,1,0,0,0,454,455,1,0,0,0,455,462,
        5,8,0,0,456,463,5,44,0,0,457,458,5,90,0,0,458,459,3,54,27,0,459,
        460,5,91,0,0,460,463,1,0,0,0,461,463,3,54,27,0,462,456,1,0,0,0,462,
        457,1,0,0,0,462,461,1,0,0,0,463,505,1,0,0,0,464,465,5,11,0,0,465,
        470,3,90,45,0,466,467,5,45,0,0,467,469,3,90,45,0,468,466,1,0,0,0,
        469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,505,1,0,0,0,
        472,470,1,0,0,0,473,474,4,22,3,0,474,475,5,38,0,0,475,482,3,78,39,
        0,476,477,5,18,0,0,477,480,3,62,31,0,478,479,5,45,0,0,479,481,3,
        62,31,0,480,478,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,476,
        1,0,0,0,482,483,1,0,0,0,483,484,1,0,0,0,484,485,6,22,-1,0,485,505,
        1,0,0,0,486,487,5,12,0,0,487,490,3,62,31,0,488,489,5,45,0,0,489,
        491,3,62,31,0,490,488,1,0,0,0,490,491,1,0,0,0,491,505,1,0,0,0,492,
        493,4,22,4,0,493,494,5,9,0,0,494,499,3,90,45,0,495,496,5,45,0,0,
        496,498,3,90,45,0,497,495,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,
        0,499,500,1,0,0,0,500,502,1,0,0,0,501,499,1,0,0,0,502,503,6,22,-1,
        0,503,505,1,0,0,0,504,380,1,0,0,0,504,384,1,0,0,0,504,412,1,0,0,
        0,504,414,1,0,0,0,504,415,1,0,0,0,504,416,1,0,0,0,504,417,1,0,0,
        0,504,421,1,0,0,0,504,437,1,0,0,0,504,438,1,0,0,0,504,440,1,0,0,
        0,504,464,1,0,0,0,504,473,1,0,0,0,504,486,1,0,0,0,504,492,1,0,0,
        0,505,45,1,0,0,0,506,509,3,62,31,0,507,509,3,48,24,0,508,506,1,0,
        0,0,508,507,1,0,0,0,509,510,1,0,0,0,510,511,5,45,0,0,511,513,1,0,
        0,0,512,508,1,0,0,0,513,514,1,0,0,0,514,512,1,0,0,0,514,515,1,0,
        0,0,515,518,1,0,0,0,516,519,3,62,31,0,517,519,3,48,24,0,518,516,
        1,0,0,0,518,517,1,0,0,0,518,519,1,0,0,0,519,522,1,0,0,0,520,522,
        3,86,43,0,521,512,1,0,0,0,521,520,1,0,0,0,522,47,1,0,0,0,523,524,
        5,44,0,0,524,525,3,78,39,0,525,49,1,0,0,0,526,540,5,49,0,0,527,532,
        3,46,23,0,528,529,5,49,0,0,529,531,3,46,23,0,530,528,1,0,0,0,531,
        534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,537,1,0,0,0,534,
        532,1,0,0,0,535,536,5,49,0,0,536,538,3,96,48,0,537,535,1,0,0,0,537,
        538,1,0,0,0,538,541,1,0,0,0,539,541,3,96,48,0,540,527,1,0,0,0,540,
        539,1,0,0,0,541,557,1,0,0,0,542,543,4,25,5,0,543,544,5,46,0,0,544,
        547,3,62,31,0,545,546,5,49,0,0,546,548,3,86,43,0,547,545,1,0,0,0,
        547,548,1,0,0,0,548,549,1,0,0,0,549,550,6,25,-1,0,550,557,1,0,0,
        0,551,554,7,2,0,0,552,555,3,96,48,0,553,555,3,86,43,0,554,552,1,
        0,0,0,554,553,1,0,0,0,555,557,1,0,0,0,556,526,1,0,0,0,556,542,1,
        0,0,0,556,551,1,0,0,0,557,51,1,0,0,0,558,563,3,78,39,0,559,560,5,
        45,0,0,560,562,3,78,39,0,561,559,1,0,0,0,562,565,1,0,0,0,563,561,
        1,0,0,0,563,564,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,566,568,
        5,45,0,0,567,566,1,0,0,0,567,568,1,0,0,0,568,53,1,0,0,0,569,574,
        3,56,28,0,570,571,5,45,0,0,571,573,3,56,28,0,572,570,1,0,0,0,573,
        576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,578,1,0,0,0,576,
        574,1,0,0,0,577,579,5,45,0,0,578,577,1,0,0,0,578,579,1,0,0,0,579,
        55,1,0,0,0,580,583,3,90,45,0,581,582,5,10,0,0,582,584,3,90,45,0,
        583,581,1,0,0,0,583,584,1,0,0,0,584,57,1,0,0,0,585,590,3,60,30,0,
        586,587,5,45,0,0,587,589,3,60,30,0,588,586,1,0,0,0,589,592,1,0,0,
        0,590,588,1,0,0,0,590,591,1,0,0,0,591,59,1,0,0,0,592,590,1,0,0,0,
        593,596,3,88,44,0,594,595,5,10,0,0,595,597,3,90,45,0,596,594,1,0,
        0,0,596,597,1,0,0,0,597,61,1,0,0,0,598,604,3,74,37,0,599,600,5,13,
        0,0,600,601,3,74,37,0,601,602,5,15,0,0,602,603,3,62,31,0,603,605,
        1,0,0,0,604,599,1,0,0,0,604,605,1,0,0,0,605,613,1,0,0,0,606,608,
        5,24,0,0,607,609,3,64,32,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,
        1,0,0,0,610,611,5,46,0,0,611,613,3,62,31,0,612,598,1,0,0,0,612,606,
        1,0,0,0,613,63,1,0,0,0,614,615,3,66,33,0,615,616,5,45,0,0,616,618,
        1,0,0,0,617,614,1,0,0,0,617,618,1,0,0,0,618,629,1,0,0,0,619,622,
        3,70,35,0,620,621,5,45,0,0,621,623,3,66,33,0,622,620,1,0,0,0,622,
        623,1,0,0,0,623,626,1,0,0,0,624,625,5,45,0,0,625,627,3,72,36,0,626,
        624,1,0,0,0,626,627,1,0,0,0,627,630,1,0,0,0,628,630,3,72,36,0,629,
        619,1,0,0,0,629,628,1,0,0,0,630,632,1,0,0,0,631,633,5,45,0,0,632,
        631,1,0,0,0,632,633,1,0,0,0,633,639,1,0,0,0,634,636,3,66,33,0,635,
        637,5,45,0,0,636,635,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,
        617,1,0,0,0,638,634,1,0,0,0,639,65,1,0,0,0,640,645,3,68,34,0,641,
        642,5,45,0,0,642,644,3,68,34,0,643,641,1,0,0,0,644,647,1,0,0,0,645,
        643,1,0,0,0,645,646,1,0,0,0,646,67,1,0,0,0,647,645,1,0,0,0,648,651,
        3,90,45,0,649,650,5,49,0,0,650,652,3,62,31,0,651,649,1,0,0,0,651,
        652,1,0,0,0,652,655,1,0,0,0,653,655,5,44,0,0,654,648,1,0,0,0,654,
        653,1,0,0,0,655,69,1,0,0,0,656,657,5,44,0,0,657,658,3,90,45,0,658,
        71,1,0,0,0,659,660,5,48,0,0,660,661,3,90,45,0,661,73,1,0,0,0,662,
        663,6,37,-1,0,663,667,3,76,38,0,664,665,5,27,0,0,665,667,3,74,37,
        3,666,662,1,0,0,0,666,664,1,0,0,0,667,676,1,0,0,0,668,669,10,2,0,
        0,669,670,5,26,0,0,670,675,3,74,37,3,671,672,10,1,0,0,672,673,5,
        25,0,0,673,675,3,74,37,2,674,668,1,0,0,0,674,671,1,0,0,0,675,678,
        1,0,0,0,676,674,1,0,0,0,676,677,1,0,0,0,677,75,1,0,0,0,678,676,1,
        0,0,0,679,680,6,38,-1,0,680,681,3,78,39,0,681,703,1,0,0,0,682,698,
        10,2,0,0,683,699,5,61,0,0,684,699,5,62,0,0,685,699,5,63,0,0,686,
        699,5,64,0,0,687,699,5,65,0,0,688,699,5,66,0,0,689,699,5,67,0,0,
        690,692,5,27,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,
        693,699,5,18,0,0,694,696,5,28,0,0,695,697,5,27,0,0,696,695,1,0,0,
        0,696,697,1,0,0,0,697,699,1,0,0,0,698,683,1,0,0,0,698,684,1,0,0,
        0,698,685,1,0,0,0,698,686,1,0,0,0,698,687,1,0,0,0,698,688,1,0,0,
        0,698,689,1,0,0,0,698,691,1,0,0,0,698,694,1,0,0,0,699,700,1,0,0,
        0,700,702,3,76,38,3,701,682,1,0,0,0,702,705,1,0,0,0,703,701,1,0,
        0,0,703,704,1,0,0,0,704,77,1,0,0,0,705,703,1,0,0,0,706,708,6,39,
        -1,0,707,709,5,36,0,0,708,707,1,0,0,0,708,709,1,0,0,0,709,710,1,
        0,0,0,710,714,3,80,40,0,711,713,3,100,50,0,712,711,1,0,0,0,713,716,
        1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,720,1,0,0,0,716,714,
        1,0,0,0,717,718,7,3,0,0,718,720,3,78,39,7,719,706,1,0,0,0,719,717,
        1,0,0,0,720,744,1,0,0,0,721,722,10,8,0,0,722,723,5,48,0,0,723,743,
        3,78,39,8,724,725,10,6,0,0,725,726,7,4,0,0,726,743,3,78,39,7,727,
        728,10,5,0,0,728,729,7,5,0,0,729,743,3,78,39,6,730,731,10,4,0,0,
        731,732,7,6,0,0,732,743,3,78,39,5,733,734,10,3,0,0,734,735,5,52,
        0,0,735,743,3,78,39,4,736,737,10,2,0,0,737,738,5,51,0,0,738,743,
        3,78,39,3,739,740,10,1,0,0,740,741,5,50,0,0,741,743,3,78,39,2,742,
        721,1,0,0,0,742,724,1,0,0,0,742,727,1,0,0,0,742,730,1,0,0,0,742,
        733,1,0,0,0,742,736,1,0,0,0,742,739,1,0,0,0,743,746,1,0,0,0,744,
        742,1,0,0,0,744,745,1,0,0,0,745,79,1,0,0,0,746,744,1,0,0,0,747,750,
        5,90,0,0,748,751,3,96,48,0,749,751,3,84,42,0,750,748,1,0,0,0,750,
        749,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,785,5,91,0,0,753,
        755,5,94,0,0,754,756,3,84,42,0,755,754,1,0,0,0,755,756,1,0,0,0,756,
        757,1,0,0,0,757,785,5,95,0,0,758,760,5,92,0,0,759,761,3,82,41,0,
        760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,785,5,93,0,0,
        763,764,5,43,0,0,764,766,3,86,43,0,765,767,5,45,0,0,766,765,1,0,
        0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,769,5,43,0,0,769,785,1,0,
        0,0,770,785,5,42,0,0,771,785,3,90,45,0,772,785,5,37,0,0,773,785,
        5,38,0,0,774,776,5,56,0,0,775,774,1,0,0,0,775,776,1,0,0,0,776,777,
        1,0,0,0,777,785,3,92,46,0,778,785,5,20,0,0,779,781,5,83,0,0,780,
        779,1,0,0,0,781,782,1,0,0,0,782,780,1,0,0,0,782,783,1,0,0,0,783,
        785,1,0,0,0,784,747,1,0,0,0,784,753,1,0,0,0,784,758,1,0,0,0,784,
        763,1,0,0,0,784,770,1,0,0,0,784,771,1,0,0,0,784,772,1,0,0,0,784,
        773,1,0,0,0,784,775,1,0,0,0,784,778,1,0,0,0,784,780,1,0,0,0,785,
        81,1,0,0,0,786,787,3,62,31,0,787,788,5,46,0,0,788,789,3,62,31,0,
        789,793,1,0,0,0,790,791,5,48,0,0,791,793,3,78,39,0,792,786,1,0,0,
        0,792,790,1,0,0,0,793,805,1,0,0,0,794,801,5,45,0,0,795,796,3,62,
        31,0,796,797,5,46,0,0,797,798,3,62,31,0,798,802,1,0,0,0,799,800,
        5,48,0,0,800,802,3,78,39,0,801,795,1,0,0,0,801,799,1,0,0,0,802,804,
        1,0,0,0,803,794,1,0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,
        1,0,0,0,806,809,1,0,0,0,807,805,1,0,0,0,808,810,5,45,0,0,809,808,
        1,0,0,0,809,810,1,0,0,0,810,818,1,0,0,0,811,812,3,62,31,0,812,813,
        5,46,0,0,813,814,3,62,31,0,814,815,3,114,57,0,815,818,1,0,0,0,816,
        818,3,84,42,0,817,792,1,0,0,0,817,811,1,0,0,0,817,816,1,0,0,0,818,
        83,1,0,0,0,819,822,3,62,31,0,820,822,3,48,24,0,821,819,1,0,0,0,821,
        820,1,0,0,0,822,837,1,0,0,0,823,838,3,114,57,0,824,827,5,45,0,0,
        825,828,3,62,31,0,826,828,3,48,24,0,827,825,1,0,0,0,827,826,1,0,
        0,0,828,830,1,0,0,0,829,824,1,0,0,0,830,833,1,0,0,0,831,829,1,0,
        0,0,831,832,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,834,836,5,45,
        0,0,835,834,1,0,0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,823,1,0,
        0,0,837,831,1,0,0,0,838,85,1,0,0,0,839,844,3,62,31,0,840,841,5,45,
        0,0,841,843,3,62,31,0,842,840,1,0,0,0,843,846,1,0,0,0,844,842,1,
        0,0,0,844,845,1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,847,849,5,
        45,0,0,848,847,1,0,0,0,848,849,1,0,0,0,849,87,1,0,0,0,850,851,6,
        44,-1,0,851,852,3,90,45,0,852,858,1,0,0,0,853,854,10,2,0,0,854,855,
        5,41,0,0,855,857,3,90,45,0,856,853,1,0,0,0,857,860,1,0,0,0,858,856,
        1,0,0,0,858,859,1,0,0,0,859,89,1,0,0,0,860,858,1,0,0,0,861,862,7,
        7,0,0,862,91,1,0,0,0,863,867,3,94,47,0,864,867,5,88,0,0,865,867,
        5,89,0,0,866,863,1,0,0,0,866,864,1,0,0,0,866,865,1,0,0,0,867,93,
        1,0,0,0,868,869,7,8,0,0,869,95,1,0,0,0,870,872,5,30,0,0,871,873,
        3,98,49,0,872,871,1,0,0,0,872,873,1,0,0,0,873,97,1,0,0,0,874,875,
        5,7,0,0,875,878,3,62,31,0,876,878,3,86,43,0,877,874,1,0,0,0,877,
        876,1,0,0,0,878,99,1,0,0,0,879,880,5,41,0,0,880,882,3,90,45,0,881,
        883,3,102,51,0,882,881,1,0,0,0,882,883,1,0,0,0,883,886,1,0,0,0,884,
        886,3,102,51,0,885,879,1,0,0,0,885,884,1,0,0,0,886,101,1,0,0,0,887,
        889,5,90,0,0,888,890,3,104,52,0,889,888,1,0,0,0,889,890,1,0,0,0,
        890,891,1,0,0,0,891,897,5,91,0,0,892,893,5,94,0,0,893,894,3,108,
        54,0,894,895,5,95,0,0,895,897,1,0,0,0,896,887,1,0,0,0,896,892,1,
        0,0,0,897,103,1,0,0,0,898,903,3,106,53,0,899,900,5,45,0,0,900,902,
        3,106,53,0,901,899,1,0,0,0,902,905,1,0,0,0,903,901,1,0,0,0,903,904,
        1,0,0,0,904,907,1,0,0,0,905,903,1,0,0,0,906,908,5,45,0,0,907,906,
        1,0,0,0,907,908,1,0,0,0,908,105,1,0,0,0,909,913,3,62,31,0,910,914,
        3,114,57,0,911,912,5,49,0,0,912,914,3,62,31,0,913,910,1,0,0,0,913,
        911,1,0,0,0,913,914,1,0,0,0,914,918,1,0,0,0,915,916,7,9,0,0,916,
        918,3,62,31,0,917,909,1,0,0,0,917,915,1,0,0,0,918,107,1,0,0,0,919,
        924,3,110,55,0,920,921,5,45,0,0,921,923,3,110,55,0,922,920,1,0,0,
        0,923,926,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,928,1,0,0,
        0,926,924,1,0,0,0,927,929,5,45,0,0,928,927,1,0,0,0,928,929,1,0,0,
        0,929,109,1,0,0,0,930,949,5,42,0,0,931,939,3,62,31,0,932,934,5,46,
        0,0,933,935,3,62,31,0,934,933,1,0,0,0,934,935,1,0,0,0,935,937,1,
        0,0,0,936,938,3,112,56,0,937,936,1,0,0,0,937,938,1,0,0,0,938,940,
        1,0,0,0,939,932,1,0,0,0,939,940,1,0,0,0,940,949,1,0,0,0,941,943,
        5,46,0,0,942,944,3,62,31,0,943,942,1,0,0,0,943,944,1,0,0,0,944,946,
        1,0,0,0,945,947,3,112,56,0,946,945,1,0,0,0,946,947,1,0,0,0,947,949,
        1,0,0,0,948,930,1,0,0,0,948,931,1,0,0,0,948,941,1,0,0,0,949,111,
        1,0,0,0,950,952,5,46,0,0,951,953,3,62,31,0,952,951,1,0,0,0,952,953,
        1,0,0,0,953,113,1,0,0,0,954,955,5,17,0,0,955,956,3,52,26,0,956,957,
        5,18,0,0,957,959,3,74,37,0,958,960,3,116,58,0,959,958,1,0,0,0,959,
        960,1,0,0,0,960,115,1,0,0,0,961,968,3,114,57,0,962,963,5,13,0,0,
        963,965,3,62,31,0,964,966,3,116,58,0,965,964,1,0,0,0,965,966,1,0,
        0,0,966,968,1,0,0,0,967,961,1,0,0,0,967,962,1,0,0,0,968,117,1,0,
        0,0,151,121,130,134,136,142,147,156,160,167,170,179,187,190,193,
        196,199,207,216,221,223,231,235,241,244,264,278,280,289,292,298,
        304,309,317,322,326,329,332,336,338,351,357,360,365,372,376,382,
        391,395,403,406,408,419,427,429,431,435,444,451,453,462,470,480,
        482,490,499,504,508,514,518,521,532,537,540,547,554,556,563,567,
        574,578,583,590,596,604,608,612,617,622,626,629,632,636,638,645,
        651,654,666,674,676,691,696,698,703,708,714,719,742,744,750,755,
        760,766,775,782,784,792,801,805,809,817,821,827,831,835,837,844,
        848,858,866,872,877,882,885,889,896,903,907,913,917,924,928,934,
        937,939,943,946,948,952,959,965,967
    ]

class PythonParser ( PythonParserBase ):

    grammarFileName = "PythonParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'None'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "'print'", "'exec'", "'True'", "'False'", 
                     "'.'", "'...'", "'`'", "'*'", "','", "':'", "';'", 
                     "'**'", "'='", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
                     "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'<'", "'>'", 
                     "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", 
                     "'+='", "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LINE_BREAK", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", 
                      "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "PRINT", "EXEC", "TRUE", "FALSE", "DOT", "ELLIPSIS", 
                      "REVERSE_QUOTE", "STAR", "COMMA", "COLON", "SEMI_COLON", 
                      "POWER", "ASSIGN", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", 
                      "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", "IDIV", 
                      "NOT_OP", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", 
                      "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "STRING", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "IMAG_NUMBER", "FLOAT_NUMBER", 
                      "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", 
                      "OPEN_BRACKET", "CLOSE_BRACKET", "NAME", "LINE_JOIN", 
                      "NEWLINE", "WS", "COMMENT" ]

    RULE_root = 0
    RULE_single_input = 1
    RULE_file_input = 2
    RULE_eval_input = 3
    RULE_stmt = 4
    RULE_compound_stmt = 5
    RULE_suite = 6
    RULE_decorator = 7
    RULE_elif_clause = 8
    RULE_else_clause = 9
    RULE_finally_clause = 10
    RULE_with_item = 11
    RULE_except_clause = 12
    RULE_classdef = 13
    RULE_funcdef = 14
    RULE_typedargslist = 15
    RULE_args = 16
    RULE_kwargs = 17
    RULE_def_parameters = 18
    RULE_def_parameter = 19
    RULE_named_parameter = 20
    RULE_simple_stmt = 21
    RULE_small_stmt = 22
    RULE_testlist_star_expr = 23
    RULE_star_expr = 24
    RULE_assign_part = 25
    RULE_exprlist = 26
    RULE_import_as_names = 27
    RULE_import_as_name = 28
    RULE_dotted_as_names = 29
    RULE_dotted_as_name = 30
    RULE_test = 31
    RULE_varargslist = 32
    RULE_vardef_parameters = 33
    RULE_vardef_parameter = 34
    RULE_varargs = 35
    RULE_varkwargs = 36
    RULE_logical_test = 37
    RULE_comparison = 38
    RULE_expr = 39
    RULE_atom = 40
    RULE_dictorsetmaker = 41
    RULE_testlist_comp = 42
    RULE_testlist = 43
    RULE_dotted_name = 44
    RULE_name = 45
    RULE_number = 46
    RULE_integer = 47
    RULE_yield_expr = 48
    RULE_yield_arg = 49
    RULE_trailer = 50
    RULE_arguments = 51
    RULE_arglist = 52
    RULE_argument = 53
    RULE_subscriptlist = 54
    RULE_subscript = 55
    RULE_sliceop = 56
    RULE_comp_for = 57
    RULE_comp_iter = 58

    ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "compound_stmt", "suite", "decorator", "elif_clause", 
                   "else_clause", "finally_clause", "with_item", "except_clause", 
                   "classdef", "funcdef", "typedargslist", "args", "kwargs", 
                   "def_parameters", "def_parameter", "named_parameter", 
                   "simple_stmt", "small_stmt", "testlist_star_expr", "star_expr", 
                   "assign_part", "exprlist", "import_as_names", "import_as_name", 
                   "dotted_as_names", "dotted_as_name", "test", "varargslist", 
                   "vardef_parameters", "vardef_parameter", "varargs", "varkwargs", 
                   "logical_test", "comparison", "expr", "atom", "dictorsetmaker", 
                   "testlist_comp", "testlist", "dotted_name", "name", "number", 
                   "integer", "yield_expr", "yield_arg", "trailer", "arguments", 
                   "arglist", "argument", "subscriptlist", "subscript", 
                   "sliceop", "comp_for", "comp_iter" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LINE_BREAK=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    NONLOCAL=9
    AS=10
    GLOBAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    NONE=20
    FINALLY=21
    WITH=22
    EXCEPT=23
    LAMBDA=24
    OR=25
    AND=26
    NOT=27
    IS=28
    CLASS=29
    YIELD=30
    DEL=31
    PASS=32
    CONTINUE=33
    BREAK=34
    ASYNC=35
    AWAIT=36
    PRINT=37
    EXEC=38
    TRUE=39
    FALSE=40
    DOT=41
    ELLIPSIS=42
    REVERSE_QUOTE=43
    STAR=44
    COMMA=45
    COLON=46
    SEMI_COLON=47
    POWER=48
    ASSIGN=49
    OR_OP=50
    XOR=51
    AND_OP=52
    LEFT_SHIFT=53
    RIGHT_SHIFT=54
    ADD=55
    MINUS=56
    DIV=57
    MOD=58
    IDIV=59
    NOT_OP=60
    LESS_THAN=61
    GREATER_THAN=62
    EQUALS=63
    GT_EQ=64
    LT_EQ=65
    NOT_EQ_1=66
    NOT_EQ_2=67
    AT=68
    ARROW=69
    ADD_ASSIGN=70
    SUB_ASSIGN=71
    MULT_ASSIGN=72
    AT_ASSIGN=73
    DIV_ASSIGN=74
    MOD_ASSIGN=75
    AND_ASSIGN=76
    OR_ASSIGN=77
    XOR_ASSIGN=78
    LEFT_SHIFT_ASSIGN=79
    RIGHT_SHIFT_ASSIGN=80
    POWER_ASSIGN=81
    IDIV_ASSIGN=82
    STRING=83
    DECIMAL_INTEGER=84
    OCT_INTEGER=85
    HEX_INTEGER=86
    BIN_INTEGER=87
    IMAG_NUMBER=88
    FLOAT_NUMBER=89
    OPEN_PAREN=90
    CLOSE_PAREN=91
    OPEN_BRACE=92
    CLOSE_BRACE=93
    OPEN_BRACKET=94
    CLOSE_BRACKET=95
    NAME=96
    LINE_JOIN=97
    NEWLINE=98
    WS=99
    COMMENT=100

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def single_input(self):
            return self.getTypedRuleContext(PythonParser.Single_inputContext,0)


        def file_input(self):
            return self.getTypedRuleContext(PythonParser.File_inputContext,0)


        def eval_input(self):
            return self.getTypedRuleContext(PythonParser.Eval_inputContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)




    def root(self):

        localctx = PythonParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 118
                self.single_input()

            elif la_ == 2:
                self.state = 119
                self.file_input()

            elif la_ == 3:
                self.state = 120
                self.eval_input()


            self.state = 123
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(PythonParser.LINE_BREAK, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)




    def single_input(self):

        localctx = PythonParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 125
                self.match(PythonParser.LINE_BREAK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 126
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 127
                self.compound_stmt()
                self.state = 128
                self.match(PythonParser.LINE_BREAK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.LINE_BREAK)
            else:
                return self.getToken(PythonParser.LINE_BREAK, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)




    def file_input(self):

        localctx = PythonParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 134
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 132
                        self.match(PythonParser.LINE_BREAK)
                        pass

                    elif la_ == 2:
                        self.state = 133
                        self.stmt()
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 136 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.LINE_BREAK)
            else:
                return self.getToken(PythonParser.LINE_BREAK, i)

        def getRuleIndex(self):
            return PythonParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)




    def eval_input(self):

        localctx = PythonParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 138
            self.testlist()
            self.state = 142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 139
                self.match(PythonParser.LINE_BREAK)
                self.state = 144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = PythonParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stmt)
        try:
            self.state = 147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 145
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 146
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonParser.RULE_compound_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class While_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(PythonParser.WHILE, 0)
        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)

        def else_clause(self):
            return self.getTypedRuleContext(PythonParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)


    class Try_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(PythonParser.TRY, 0)
        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(PythonParser.Finally_clauseContext,0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(PythonParser.Except_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(PythonParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)


    class If_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.cond = None # TestContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(PythonParser.IF, 0)
        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)

        def elif_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Elif_clauseContext)
            else:
                return self.getTypedRuleContext(PythonParser.Elif_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(PythonParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)


    class With_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(PythonParser.WITH, 0)
        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonParser.With_itemContext,i)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)


    class Class_or_func_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classdef(self):
            return self.getTypedRuleContext(PythonParser.ClassdefContext,0)

        def funcdef(self):
            return self.getTypedRuleContext(PythonParser.FuncdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(PythonParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_func_def_stmt" ):
                listener.enterClass_or_func_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_func_def_stmt" ):
                listener.exitClass_or_func_def_stmt(self)


    class For_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)
        def exprlist(self):
            return self.getTypedRuleContext(PythonParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(PythonParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)
        def else_clause(self):
            return self.getTypedRuleContext(PythonParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)



    def compound_stmt(self):

        localctx = PythonParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.state = 223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                localctx = PythonParser.If_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 149
                self.match(PythonParser.IF)
                self.state = 150
                localctx.cond = self.test()
                self.state = 151
                self.match(PythonParser.COLON)
                self.state = 152
                self.suite()
                self.state = 156
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 153
                        self.elif_clause() 
                    self.state = 158
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                self.state = 160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 159
                    self.else_clause()


                pass

            elif la_ == 2:
                localctx = PythonParser.While_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 162
                self.match(PythonParser.WHILE)
                self.state = 163
                self.test()
                self.state = 164
                self.match(PythonParser.COLON)
                self.state = 165
                self.suite()
                self.state = 167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 166
                    self.else_clause()


                pass

            elif la_ == 3:
                localctx = PythonParser.For_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 169
                    self.match(PythonParser.ASYNC)


                self.state = 172
                self.match(PythonParser.FOR)
                self.state = 173
                self.exprlist()
                self.state = 174
                self.match(PythonParser.IN)
                self.state = 175
                self.testlist()
                self.state = 176
                self.match(PythonParser.COLON)
                self.state = 177
                self.suite()
                self.state = 179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 178
                    self.else_clause()


                pass

            elif la_ == 4:
                localctx = PythonParser.Try_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 181
                self.match(PythonParser.TRY)
                self.state = 182
                self.match(PythonParser.COLON)
                self.state = 183
                self.suite()
                self.state = 196
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 185 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 184
                            self.except_clause()

                        else:
                            raise NoViableAltException(self)
                        self.state = 187 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                    self.state = 190
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 189
                        self.else_clause()


                    self.state = 193
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 192
                        self.finally_clause()


                    pass
                elif token in [21]:
                    self.state = 195
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = PythonParser.With_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 198
                    self.match(PythonParser.ASYNC)


                self.state = 201
                self.match(PythonParser.WITH)
                self.state = 202
                self.with_item()
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 203
                    self.match(PythonParser.COMMA)
                    self.state = 204
                    self.with_item()
                    self.state = 209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 210
                self.match(PythonParser.COLON)
                self.state = 211
                self.suite()
                pass

            elif la_ == 6:
                localctx = PythonParser.Class_or_func_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==68:
                    self.state = 213
                    self.decorator()
                    self.state = 218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 221
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 219
                    self.classdef()
                    pass
                elif token in [4, 35]:
                    self.state = 220
                    self.funcdef()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(PythonParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(PythonParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)




    def suite(self):

        localctx = PythonParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_suite)
        try:
            self.state = 235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 225
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 226
                self.match(PythonParser.LINE_BREAK)
                self.state = 227
                self.match(PythonParser.INDENT)
                self.state = 229 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 228
                        self.stmt()

                    else:
                        raise NoViableAltException(self)
                    self.state = 231 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                self.state = 233
                self.match(PythonParser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(PythonParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def LINE_BREAK(self):
            return self.getToken(PythonParser.LINE_BREAK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)




    def decorator(self):

        localctx = PythonParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(PythonParser.AT)
            self.state = 238
            self.dotted_name(0)
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 239
                self.match(PythonParser.OPEN_PAREN)
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261322287421849600) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                    self.state = 240
                    self.arglist()


                self.state = 243
                self.match(PythonParser.CLOSE_PAREN)


            self.state = 246
            self.match(PythonParser.LINE_BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(PythonParser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_elif_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_clause" ):
                listener.enterElif_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_clause" ):
                listener.exitElif_clause(self)




    def elif_clause(self):

        localctx = PythonParser.Elif_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_elif_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(PythonParser.ELIF)
            self.state = 249
            self.test()
            self.state = 250
            self.match(PythonParser.COLON)
            self.state = 251
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)




    def else_clause(self):

        localctx = PythonParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.match(PythonParser.ELSE)
            self.state = 254
            self.match(PythonParser.COLON)
            self.state = 255
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(PythonParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)




    def finally_clause(self):

        localctx = PythonParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(PythonParser.FINALLY)
            self.state = 258
            self.match(PythonParser.COLON)
            self.state = 259
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(PythonParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)




    def with_item(self):

        localctx = PythonParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.test()
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 262
                self.match(PythonParser.AS)
                self.state = 263
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)




    def except_clause(self):

        localctx = PythonParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.match(PythonParser.EXCEPT)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261023220259094528) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                self.state = 267
                self.test()
                self.state = 278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 268
                    if not self.CheckVersion(2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(2)")
                    self.state = 269
                    self.match(PythonParser.COMMA)
                    self.state = 270
                    self.name()
                    self.SetVersion(2);

                elif la_ == 2:
                    self.state = 273
                    if not self.CheckVersion(3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.CheckVersion(3)")
                    self.state = 274
                    self.match(PythonParser.AS)
                    self.state = 275
                    self.name()
                    self.SetVersion(3);




            self.state = 282
            self.match(PythonParser.COLON)
            self.state = 283
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)




    def classdef(self):

        localctx = PythonParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(PythonParser.CLASS)
            self.state = 286
            self.name()
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 287
                self.match(PythonParser.OPEN_PAREN)
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261322287421849600) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                    self.state = 288
                    self.arglist()


                self.state = 291
                self.match(PythonParser.CLOSE_PAREN)


            self.state = 294
            self.match(PythonParser.COLON)
            self.state = 295
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(PythonParser.TypedargslistContext,0)


        def ARROW(self):
            return self.getToken(PythonParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)




    def funcdef(self):

        localctx = PythonParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 297
                self.match(PythonParser.ASYNC)


            self.state = 300
            self.match(PythonParser.DEF)
            self.state = 301
            self.name()
            self.state = 302
            self.match(PythonParser.OPEN_PAREN)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & 144115188075856419) != 0):
                self.state = 303
                self.typedargslist()


            self.state = 306
            self.match(PythonParser.CLOSE_PAREN)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 307
                self.match(PythonParser.ARROW)
                self.state = 308
                self.test()


            self.state = 311
            self.match(PythonParser.COLON)
            self.state = 312
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(PythonParser.ArgsContext,0)


        def kwargs(self):
            return self.getTypedRuleContext(PythonParser.KwargsContext,0)


        def def_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Def_parametersContext)
            else:
                return self.getTypedRuleContext(PythonParser.Def_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)




    def typedargslist(self):

        localctx = PythonParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 314
                    self.def_parameters()
                    self.state = 315
                    self.match(PythonParser.COMMA)


                self.state = 329
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 319
                    self.args()
                    self.state = 322
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        self.state = 320
                        self.match(PythonParser.COMMA)
                        self.state = 321
                        self.def_parameters()


                    self.state = 326
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                    if la_ == 1:
                        self.state = 324
                        self.match(PythonParser.COMMA)
                        self.state = 325
                        self.kwargs()


                    pass
                elif token in [48]:
                    self.state = 328
                    self.kwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 331
                    self.match(PythonParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 334
                self.def_parameters()
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 335
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(PythonParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = PythonParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(PythonParser.STAR)
            self.state = 341
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(PythonParser.POWER, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(PythonParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)




    def kwargs(self):

        localctx = PythonParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_kwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(PythonParser.POWER)
            self.state = 344
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Def_parameterContext)
            else:
                return self.getTypedRuleContext(PythonParser.Def_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_def_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameters" ):
                listener.enterDef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameters" ):
                listener.exitDef_parameters(self)




    def def_parameters(self):

        localctx = PythonParser.Def_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_def_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.def_parameter()
            self.state = 351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 347
                    self.match(PythonParser.COMMA)
                    self.state = 348
                    self.def_parameter() 
                self.state = 353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_parameter(self):
            return self.getTypedRuleContext(PythonParser.Named_parameterContext,0)


        def ASSIGN(self):
            return self.getToken(PythonParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_def_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameter" ):
                listener.enterDef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameter" ):
                listener.exitDef_parameter(self)




    def def_parameter(self):

        localctx = PythonParser.Def_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_def_parameter)
        self._la = 0 # Token type
        try:
            self.state = 360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 354
                self.named_parameter()
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 355
                    self.match(PythonParser.ASSIGN)
                    self.state = 356
                    self.test()


                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 359
                self.match(PythonParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_named_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_parameter" ):
                listener.enterNamed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_parameter" ):
                listener.exitNamed_parameter(self)




    def named_parameter(self):

        localctx = PythonParser.Named_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_named_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.name()
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 363
                self.match(PythonParser.COLON)
                self.state = 364
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(PythonParser.Small_stmtContext,i)


        def LINE_BREAK(self):
            return self.getToken(PythonParser.LINE_BREAK, 0)

        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.SEMI_COLON)
            else:
                return self.getToken(PythonParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return PythonParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)




    def simple_stmt(self):

        localctx = PythonParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.small_stmt()
            self.state = 372
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 368
                    self.match(PythonParser.SEMI_COLON)
                    self.state = 369
                    self.small_stmt() 
                self.state = 374
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 375
                self.match(PythonParser.SEMI_COLON)


            self.state = 378
            _la = self._input.LA(1)
            if not(_la==-1 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonParser.RULE_small_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assert_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(PythonParser.ASSERT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)

        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)


    class Nonlocal_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONLOCAL(self):
            return self.getToken(PythonParser.NONLOCAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.NameContext)
            else:
                return self.getTypedRuleContext(PythonParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)


    class Pass_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASS(self):
            return self.getToken(PythonParser.PASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)


    class Import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)
        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonParser.Dotted_as_namesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)


    class Expr_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(PythonParser.Testlist_star_exprContext,0)

        def assign_part(self):
            return self.getTypedRuleContext(PythonParser.Assign_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)


    class Raise_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RAISE(self):
            return self.getToken(PythonParser.RAISE, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)


    class Yield_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)


    class From_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)
        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)
        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)
        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)
        def import_as_names(self):
            return self.getTypedRuleContext(PythonParser.Import_as_namesContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)
        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.ELLIPSIS)
            else:
                return self.getToken(PythonParser.ELLIPSIS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stmt" ):
                listener.enterFrom_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stmt" ):
                listener.exitFrom_stmt(self)


    class Global_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLOBAL(self):
            return self.getToken(PythonParser.GLOBAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.NameContext)
            else:
                return self.getTypedRuleContext(PythonParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)


    class Continue_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(PythonParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)


    class Exec_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXEC(self):
            return self.getToken(PythonParser.EXEC, 0)
        def expr(self):
            return self.getTypedRuleContext(PythonParser.ExprContext,0)

        def IN(self):
            return self.getToken(PythonParser.IN, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)

        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExec_stmt" ):
                listener.enterExec_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExec_stmt" ):
                listener.exitExec_stmt(self)


    class Break_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(PythonParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)


    class Del_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEL(self):
            return self.getToken(PythonParser.DEL, 0)
        def exprlist(self):
            return self.getTypedRuleContext(PythonParser.ExprlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)


    class Print_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(PythonParser.PRINT, 0)
        def RIGHT_SHIFT(self):
            return self.getToken(PythonParser.RIGHT_SHIFT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_stmt" ):
                listener.enterPrint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_stmt" ):
                listener.exitPrint_stmt(self)


    class Return_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(PythonParser.RETURN, 0)
        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)



    def small_stmt(self):

        localctx = PythonParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_small_stmt)
        self._la = 0 # Token type
        try:
            self.state = 504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                localctx = PythonParser.Expr_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                self.testlist_star_expr()
                self.state = 382
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 381
                    self.assign_part()


                pass

            elif la_ == 2:
                localctx = PythonParser.Print_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 384
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 385
                self.match(PythonParser.PRINT)
                self.state = 408
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                    self.state = 386
                    self.test()
                    self.state = 391
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 387
                            self.match(PythonParser.COMMA)
                            self.state = 388
                            self.test() 
                        self.state = 393
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

                    self.state = 395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==45:
                        self.state = 394
                        self.match(PythonParser.COMMA)


                    pass
                elif token in [54]:
                    self.state = 397
                    self.match(PythonParser.RIGHT_SHIFT)
                    self.state = 398
                    self.test()

                    self.state = 401 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 399
                            self.match(PythonParser.COMMA)
                            self.state = 400
                            self.test()

                        else:
                            raise NoViableAltException(self)
                        self.state = 403 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                    self.state = 406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==45:
                        self.state = 405
                        self.match(PythonParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                self.SetVersion(2);
                pass

            elif la_ == 3:
                localctx = PythonParser.Del_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 412
                self.match(PythonParser.DEL)
                self.state = 413
                self.exprlist()
                pass

            elif la_ == 4:
                localctx = PythonParser.Pass_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 414
                self.match(PythonParser.PASS)
                pass

            elif la_ == 5:
                localctx = PythonParser.Break_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 415
                self.match(PythonParser.BREAK)
                pass

            elif la_ == 6:
                localctx = PythonParser.Continue_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 416
                self.match(PythonParser.CONTINUE)
                pass

            elif la_ == 7:
                localctx = PythonParser.Return_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 417
                self.match(PythonParser.RETURN)
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261023220259094528) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                    self.state = 418
                    self.testlist()


                pass

            elif la_ == 8:
                localctx = PythonParser.Raise_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 421
                self.match(PythonParser.RAISE)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261023220259094528) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                    self.state = 422
                    self.test()
                    self.state = 429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==45:
                        self.state = 423
                        self.match(PythonParser.COMMA)
                        self.state = 424
                        self.test()
                        self.state = 427
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==45:
                            self.state = 425
                            self.match(PythonParser.COMMA)
                            self.state = 426
                            self.test()






                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 433
                    self.match(PythonParser.FROM)
                    self.state = 434
                    self.test()


                pass

            elif la_ == 9:
                localctx = PythonParser.Yield_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 437
                self.yield_expr()
                pass

            elif la_ == 10:
                localctx = PythonParser.Import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 438
                self.match(PythonParser.IMPORT)
                self.state = 439
                self.dotted_as_names()
                pass

            elif la_ == 11:
                localctx = PythonParser.From_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 440
                self.match(PythonParser.FROM)
                self.state = 453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 444
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==41 or _la==42:
                        self.state = 441
                        _la = self._input.LA(1)
                        if not(_la==41 or _la==42):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 446
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 447
                    self.dotted_name(0)
                    pass

                elif la_ == 2:
                    self.state = 449 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 448
                        _la = self._input.LA(1)
                        if not(_la==41 or _la==42):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 451 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==41 or _la==42):
                            break

                    pass


                self.state = 455
                self.match(PythonParser.IMPORT)
                self.state = 462
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 456
                    self.match(PythonParser.STAR)
                    pass
                elif token in [90]:
                    self.state = 457
                    self.match(PythonParser.OPEN_PAREN)
                    self.state = 458
                    self.import_as_names()
                    self.state = 459
                    self.match(PythonParser.CLOSE_PAREN)
                    pass
                elif token in [39, 40, 96]:
                    self.state = 461
                    self.import_as_names()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = PythonParser.Global_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 464
                self.match(PythonParser.GLOBAL)
                self.state = 465
                self.name()
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 466
                    self.match(PythonParser.COMMA)
                    self.state = 467
                    self.name()
                    self.state = 472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 13:
                localctx = PythonParser.Exec_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 473
                if not self.CheckVersion(2):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(2)")
                self.state = 474
                self.match(PythonParser.EXEC)
                self.state = 475
                self.expr(0)
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 476
                    self.match(PythonParser.IN)
                    self.state = 477
                    self.test()
                    self.state = 480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==45:
                        self.state = 478
                        self.match(PythonParser.COMMA)
                        self.state = 479
                        self.test()




                self.SetVersion(2);
                pass

            elif la_ == 14:
                localctx = PythonParser.Assert_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 486
                self.match(PythonParser.ASSERT)
                self.state = 487
                self.test()
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 488
                    self.match(PythonParser.COMMA)
                    self.state = 489
                    self.test()


                pass

            elif la_ == 15:
                localctx = PythonParser.Nonlocal_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 492
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 493
                self.match(PythonParser.NONLOCAL)
                self.state = 494
                self.name()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==45:
                    self.state = 495
                    self.match(PythonParser.COMMA)
                    self.state = 496
                    self.name()
                    self.state = 501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.SetVersion(3);
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)




    def testlist_star_expr(self):

        localctx = PythonParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_testlist_star_expr)
        try:
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 512 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 508
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                            self.state = 506
                            self.test()
                            pass
                        elif token in [44]:
                            self.state = 507
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 510
                        self.match(PythonParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 514 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                self.state = 518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 516
                    self.test()

                elif la_ == 2:
                    self.state = 517
                    self.star_expr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 520
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(PythonParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)




    def star_expr(self):

        localctx = PythonParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(PythonParser.STAR)
            self.state = 524
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.ASSIGN)
            else:
                return self.getToken(PythonParser.ASSIGN, i)

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(PythonParser.Testlist_star_exprContext,i)


        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def ADD_ASSIGN(self):
            return self.getToken(PythonParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(PythonParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(PythonParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(PythonParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(PythonParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(PythonParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(PythonParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(PythonParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(PythonParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(PythonParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(PythonParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(PythonParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(PythonParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_assign_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_part" ):
                listener.enterAssign_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_part" ):
                listener.exitAssign_part(self)




    def assign_part(self):

        localctx = PythonParser.Assign_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assign_part)
        self._la = 0 # Token type
        try:
            self.state = 556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 526
                self.match(PythonParser.ASSIGN)
                self.state = 540
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 44, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                    self.state = 527
                    self.testlist_star_expr()
                    self.state = 532
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 528
                            self.match(PythonParser.ASSIGN)
                            self.state = 529
                            self.testlist_star_expr() 
                        self.state = 534
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                    self.state = 537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==49:
                        self.state = 535
                        self.match(PythonParser.ASSIGN)
                        self.state = 536
                        self.yield_expr()


                    pass
                elif token in [30]:
                    self.state = 539
                    self.yield_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                if not self.CheckVersion(3):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.CheckVersion(3)")
                self.state = 543
                self.match(PythonParser.COLON)
                self.state = 544
                self.test()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 545
                    self.match(PythonParser.ASSIGN)
                    self.state = 546
                    self.testlist()


                self.SetVersion(3);
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 551
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 8191) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 554
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 552
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                    self.state = 553
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)




    def exprlist(self):

        localctx = PythonParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.expr(0)
            self.state = 563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 559
                    self.match(PythonParser.COMMA)
                    self.state = 560
                    self.expr(0) 
                self.state = 565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 566
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)




    def import_as_names(self):

        localctx = PythonParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.import_as_name()
            self.state = 574
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 570
                    self.match(PythonParser.COMMA)
                    self.state = 571
                    self.import_as_name() 
                self.state = 576
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 577
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.NameContext)
            else:
                return self.getTypedRuleContext(PythonParser.NameContext,i)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)




    def import_as_name(self):

        localctx = PythonParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.name()
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 581
                self.match(PythonParser.AS)
                self.state = 582
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)




    def dotted_as_names(self):

        localctx = PythonParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.dotted_as_name()
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==45:
                self.state = 586
                self.match(PythonParser.COMMA)
                self.state = 587
                self.dotted_as_name()
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)




    def dotted_as_name(self):

        localctx = PythonParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.dotted_name(0)
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 594
                self.match(PythonParser.AS)
                self.state = 595
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(PythonParser.Logical_testContext,i)


        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def LAMBDA(self):
            return self.getToken(PythonParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def varargslist(self):
            return self.getTypedRuleContext(PythonParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)




    def test(self):

        localctx = PythonParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 27, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.logical_test(0)
                self.state = 604
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 599
                    self.match(PythonParser.IF)
                    self.state = 600
                    self.logical_test(0)
                    self.state = 601
                    self.match(PythonParser.ELSE)
                    self.state = 602
                    self.test()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 606
                self.match(PythonParser.LAMBDA)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & 144115188075856419) != 0):
                    self.state = 607
                    self.varargslist()


                self.state = 610
                self.match(PythonParser.COLON)
                self.state = 611
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varargs(self):
            return self.getTypedRuleContext(PythonParser.VarargsContext,0)


        def varkwargs(self):
            return self.getTypedRuleContext(PythonParser.VarkwargsContext,0)


        def vardef_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Vardef_parametersContext)
            else:
                return self.getTypedRuleContext(PythonParser.Vardef_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)




    def varargslist(self):

        localctx = PythonParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 614
                    self.vardef_parameters()
                    self.state = 615
                    self.match(PythonParser.COMMA)


                self.state = 629
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 619
                    self.varargs()
                    self.state = 622
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                    if la_ == 1:
                        self.state = 620
                        self.match(PythonParser.COMMA)
                        self.state = 621
                        self.vardef_parameters()


                    self.state = 626
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                    if la_ == 1:
                        self.state = 624
                        self.match(PythonParser.COMMA)
                        self.state = 625
                        self.varkwargs()


                    pass
                elif token in [48]:
                    self.state = 628
                    self.varkwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 631
                    self.match(PythonParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.vardef_parameters()
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 635
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardef_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Vardef_parameterContext)
            else:
                return self.getTypedRuleContext(PythonParser.Vardef_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_vardef_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameters" ):
                listener.enterVardef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameters" ):
                listener.exitVardef_parameters(self)




    def vardef_parameters(self):

        localctx = PythonParser.Vardef_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_vardef_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.vardef_parameter()
            self.state = 645
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 641
                    self.match(PythonParser.COMMA)
                    self.state = 642
                    self.vardef_parameter() 
                self.state = 647
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(PythonParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_vardef_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameter" ):
                listener.enterVardef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameter" ):
                listener.exitVardef_parameter(self)




    def vardef_parameter(self):

        localctx = PythonParser.Vardef_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vardef_parameter)
        self._la = 0 # Token type
        try:
            self.state = 654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 648
                self.name()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 649
                    self.match(PythonParser.ASSIGN)
                    self.state = 650
                    self.test()


                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.match(PythonParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_varargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargs" ):
                listener.enterVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargs" ):
                listener.exitVarargs(self)




    def varargs(self):

        localctx = PythonParser.VarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_varargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(PythonParser.STAR)
            self.state = 657
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarkwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(PythonParser.POWER, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_varkwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarkwargs" ):
                listener.enterVarkwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarkwargs" ):
                listener.exitVarkwargs(self)




    def varkwargs(self):

        localctx = PythonParser.VarkwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_varkwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(PythonParser.POWER)
            self.state = 660
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def comparison(self):
            return self.getTypedRuleContext(PythonParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(PythonParser.Logical_testContext,i)


        def AND(self):
            return self.getToken(PythonParser.AND, 0)

        def OR(self):
            return self.getToken(PythonParser.OR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_logical_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_test" ):
                listener.enterLogical_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_test" ):
                listener.exitLogical_test(self)



    def logical_test(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Logical_testContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_logical_test, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                self.state = 663
                self.comparison(0)
                pass
            elif token in [27]:
                self.state = 664
                self.match(PythonParser.NOT)
                self.state = 665
                self.logical_test(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 674
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                    if la_ == 1:
                        localctx = PythonParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 668
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 669
                        localctx.op = self.match(PythonParser.AND)
                        self.state = 670
                        self.logical_test(3)
                        pass

                    elif la_ == 2:
                        localctx = PythonParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 671
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 672
                        localctx.op = self.match(PythonParser.OR)
                        self.state = 673
                        self.logical_test(2)
                        pass

             
                self.state = 678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optional = None # Token

        def expr(self):
            return self.getTypedRuleContext(PythonParser.ExprContext,0)


        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(PythonParser.ComparisonContext,i)


        def LESS_THAN(self):
            return self.getToken(PythonParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(PythonParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(PythonParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(PythonParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(PythonParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(PythonParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(PythonParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def IS(self):
            return self.getToken(PythonParser.IS, 0)

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)



    def comparison(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.ComparisonContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_comparison, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 703
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.ComparisonContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparison)
                    self.state = 682
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 698
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [61]:
                        self.state = 683
                        self.match(PythonParser.LESS_THAN)
                        pass
                    elif token in [62]:
                        self.state = 684
                        self.match(PythonParser.GREATER_THAN)
                        pass
                    elif token in [63]:
                        self.state = 685
                        self.match(PythonParser.EQUALS)
                        pass
                    elif token in [64]:
                        self.state = 686
                        self.match(PythonParser.GT_EQ)
                        pass
                    elif token in [65]:
                        self.state = 687
                        self.match(PythonParser.LT_EQ)
                        pass
                    elif token in [66]:
                        self.state = 688
                        self.match(PythonParser.NOT_EQ_1)
                        pass
                    elif token in [67]:
                        self.state = 689
                        self.match(PythonParser.NOT_EQ_2)
                        pass
                    elif token in [18, 27]:
                        self.state = 691
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 690
                            localctx.optional = self.match(PythonParser.NOT)


                        self.state = 693
                        self.match(PythonParser.IN)
                        pass
                    elif token in [28]:
                        self.state = 694
                        self.match(PythonParser.IS)
                        self.state = 696
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 695
                            localctx.optional = self.match(PythonParser.NOT)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 700
                    self.comparison(3) 
                self.state = 705
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atom(self):
            return self.getTypedRuleContext(PythonParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(PythonParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PythonParser.TrailerContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def ADD(self):
            return self.getToken(PythonParser.ADD, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(PythonParser.NOT_OP, 0)

        def POWER(self):
            return self.getToken(PythonParser.POWER, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def DIV(self):
            return self.getToken(PythonParser.DIV, 0)

        def MOD(self):
            return self.getToken(PythonParser.MOD, 0)

        def IDIV(self):
            return self.getToken(PythonParser.IDIV, 0)

        def AT(self):
            return self.getToken(PythonParser.AT, 0)

        def LEFT_SHIFT(self):
            return self.getToken(PythonParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(PythonParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(PythonParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(PythonParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(PythonParser.OR_OP, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 707
                    self.match(PythonParser.AWAIT)


                self.state = 710
                self.atom()
                self.state = 714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 711
                        self.trailer() 
                    self.state = 716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                pass

            elif la_ == 2:
                self.state = 717
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1261007895663738880) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 718
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 744
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 742
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 721
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 722
                        localctx.op = self.match(PythonParser.POWER)
                        self.state = 723
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 724
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 725
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & 16834561) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 726
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 727
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 728
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==55 or _la==56):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 729
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 730
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 731
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==53 or _la==54):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 732
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 733
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 734
                        localctx.op = self.match(PythonParser.AND_OP)
                        self.state = 735
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 736
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 737
                        localctx.op = self.match(PythonParser.XOR)
                        self.state = 738
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 739
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 740
                        localctx.op = self.match(PythonParser.OR_OP)
                        self.state = 741
                        self.expr(2)
                        pass

             
                self.state = 746
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(PythonParser.Testlist_compContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(PythonParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(PythonParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(PythonParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(PythonParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(PythonParser.DictorsetmakerContext,0)


        def REVERSE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.REVERSE_QUOTE)
            else:
                return self.getToken(PythonParser.REVERSE_QUOTE, i)

        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def ELLIPSIS(self):
            return self.getToken(PythonParser.ELLIPSIS, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def PRINT(self):
            return self.getToken(PythonParser.PRINT, 0)

        def EXEC(self):
            return self.getToken(PythonParser.EXEC, 0)

        def number(self):
            return self.getTypedRuleContext(PythonParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.STRING)
            else:
                return self.getToken(PythonParser.STRING, i)

        def getRuleIndex(self):
            return PythonParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = PythonParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.match(PythonParser.OPEN_PAREN)
                self.state = 750
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 748
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 44, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                    self.state = 749
                    self.testlist_comp()
                    pass
                elif token in [91]:
                    pass
                else:
                    pass
                self.state = 752
                self.match(PythonParser.CLOSE_PAREN)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.match(PythonParser.OPEN_BRACKET)
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261040812445138944) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                    self.state = 754
                    self.testlist_comp()


                self.state = 757
                self.match(PythonParser.CLOSE_BRACKET)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 3)
                self.state = 758
                self.match(PythonParser.OPEN_BRACE)
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261322287421849600) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                    self.state = 759
                    self.dictorsetmaker()


                self.state = 762
                self.match(PythonParser.CLOSE_BRACE)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 763
                self.match(PythonParser.REVERSE_QUOTE)
                self.state = 764
                self.testlist()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 765
                    self.match(PythonParser.COMMA)


                self.state = 768
                self.match(PythonParser.REVERSE_QUOTE)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 5)
                self.state = 770
                self.match(PythonParser.ELLIPSIS)
                pass
            elif token in [39, 40, 96]:
                self.enterOuterAlt(localctx, 6)
                self.state = 771
                self.name()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 7)
                self.state = 772
                self.match(PythonParser.PRINT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 8)
                self.state = 773
                self.match(PythonParser.EXEC)
                pass
            elif token in [56, 84, 85, 86, 87, 88, 89]:
                self.enterOuterAlt(localctx, 9)
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 774
                    self.match(PythonParser.MINUS)


                self.state = 777
                self.number()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 10)
                self.state = 778
                self.match(PythonParser.NONE)
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 11)
                self.state = 780 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 779
                        self.match(PythonParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 782 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COLON)
            else:
                return self.getToken(PythonParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.POWER)
            else:
                return self.getToken(PythonParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def comp_for(self):
            return self.getTypedRuleContext(PythonParser.Comp_forContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(PythonParser.Testlist_compContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)




    def dictorsetmaker(self):

        localctx = PythonParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                    self.state = 786
                    self.test()
                    self.state = 787
                    self.match(PythonParser.COLON)
                    self.state = 788
                    self.test()
                    pass
                elif token in [48]:
                    self.state = 790
                    self.match(PythonParser.POWER)
                    self.state = 791
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 805
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 794
                        self.match(PythonParser.COMMA)
                        self.state = 801
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                            self.state = 795
                            self.test()
                            self.state = 796
                            self.match(PythonParser.COLON)
                            self.state = 797
                            self.test()
                            pass
                        elif token in [48]:
                            self.state = 799
                            self.match(PythonParser.POWER)
                            self.state = 800
                            self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 807
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 808
                    self.match(PythonParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.test()
                self.state = 812
                self.match(PythonParser.COLON)
                self.state = 813
                self.test()
                self.state = 814
                self.comp_for()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 816
                self.testlist_comp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)




    def testlist_comp(self):

        localctx = PythonParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                self.state = 819
                self.test()
                pass
            elif token in [44]:
                self.state = 820
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 823
                self.comp_for()
                pass
            elif token in [45, 91, 93, 95]:
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 824
                        self.match(PythonParser.COMMA)
                        self.state = 827
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                            self.state = 825
                            self.test()
                            pass
                        elif token in [44]:
                            self.state = 826
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 833
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 834
                    self.match(PythonParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)




    def testlist(self):

        localctx = PythonParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.test()
            self.state = 844
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 840
                    self.match(PythonParser.COMMA)
                    self.state = 841
                    self.test() 
                self.state = 846
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 847
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 853
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 854
                    self.match(PythonParser.DOT)
                    self.state = 855
                    self.name() 
                self.state = 860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = PythonParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & 144115188075855875) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(PythonParser.IntegerContext,0)


        def IMAG_NUMBER(self):
            return self.getToken(PythonParser.IMAG_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(PythonParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = PythonParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_number)
        try:
            self.state = 866
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84, 85, 86, 87]:
                self.enterOuterAlt(localctx, 1)
                self.state = 863
                self.integer()
                pass
            elif token in [88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                self.match(PythonParser.IMAG_NUMBER)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 3)
                self.state = 865
                self.match(PythonParser.FLOAT_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(PythonParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(PythonParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(PythonParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(PythonParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)




    def integer(self):

        localctx = PythonParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(PythonParser.Yield_argContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)




    def yield_expr(self):

        localctx = PythonParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(PythonParser.YIELD)
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261023220259094656) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                self.state = 871
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)




    def yield_arg(self):

        localctx = PythonParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_yield_arg)
        try:
            self.state = 877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.match(PythonParser.FROM)
                self.state = 875
                self.test()
                pass
            elif token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 876
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)




    def trailer(self):

        localctx = PythonParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_trailer)
        try:
            self.state = 885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.match(PythonParser.DOT)
                self.state = 880
                self.name()
                self.state = 882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 881
                    self.arguments()


                pass
            elif token in [90, 94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 884
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonParser.ArglistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(PythonParser.OPEN_BRACKET, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(PythonParser.SubscriptlistContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(PythonParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = PythonParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.state = 896
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.match(PythonParser.OPEN_PAREN)
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261322287421849600) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                    self.state = 888
                    self.arglist()


                self.state = 891
                self.match(PythonParser.CLOSE_PAREN)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.match(PythonParser.OPEN_BRACKET)
                self.state = 893
                self.subscriptlist()
                self.state = 894
                self.match(PythonParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PythonParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)




    def arglist(self):

        localctx = PythonParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.argument()
            self.state = 903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 899
                    self.match(PythonParser.COMMA)
                    self.state = 900
                    self.argument() 
                self.state = 905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 906
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonParser.Comp_forContext,0)


        def ASSIGN(self):
            return self.getToken(PythonParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(PythonParser.POWER, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = PythonParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 42, 43, 55, 56, 60, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.test()
                self.state = 913
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17]:
                    self.state = 910
                    self.comp_for()
                    pass
                elif token in [49]:
                    self.state = 911
                    self.match(PythonParser.ASSIGN)
                    self.state = 912
                    self.test()
                    pass
                elif token in [45, 91]:
                    pass
                else:
                    pass
                pass
            elif token in [44, 48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                _la = self._input.LA(1)
                if not(_la==44 or _la==48):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 916
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(PythonParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)




    def subscriptlist(self):

        localctx = PythonParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.subscript()
            self.state = 924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 920
                    self.match(PythonParser.COMMA)
                    self.state = 921
                    self.subscript() 
                self.state = 926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 927
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELLIPSIS(self):
            return self.getToken(PythonParser.ELLIPSIS, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(PythonParser.SliceopContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = PythonParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 930
                self.match(PythonParser.ELLIPSIS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                self.test()
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 932
                    self.match(PythonParser.COLON)
                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261023220259094528) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                        self.state = 933
                        self.test()


                    self.state = 937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==46:
                        self.state = 936
                        self.sliceop()




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 941
                self.match(PythonParser.COLON)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261023220259094528) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                    self.state = 942
                    self.test()


                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 945
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)




    def sliceop(self):

        localctx = PythonParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(PythonParser.COLON)
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261023220259094528) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 11007) != 0):
                self.state = 951
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def logical_test(self):
            return self.getTypedRuleContext(PythonParser.Logical_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)




    def comp_for(self):

        localctx = PythonParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(PythonParser.FOR)
            self.state = 955
            self.exprlist()
            self.state = 956
            self.match(PythonParser.IN)
            self.state = 957
            self.logical_test(0)
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==17:
                self.state = 958
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(PythonParser.Comp_forContext,0)


        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)




    def comp_iter(self):

        localctx = PythonParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_comp_iter)
        self._la = 0 # Token type
        try:
            self.state = 967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self.match(PythonParser.IF)
                self.state = 963
                self.test()
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==17:
                    self.state = 964
                    self.comp_iter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.except_clause_sempred
        self._predicates[22] = self.small_stmt_sempred
        self._predicates[25] = self.assign_part_sempred
        self._predicates[37] = self.logical_test_sempred
        self._predicates[38] = self.comparison_sempred
        self._predicates[39] = self.expr_sempred
        self._predicates[44] = self.dotted_name_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def except_clause_sempred(self, localctx:Except_clauseContext, predIndex:int):
            if predIndex == 0:
                return self.CheckVersion(2)
         

            if predIndex == 1:
                return self.CheckVersion(3)
         

    def small_stmt_sempred(self, localctx:Small_stmtContext, predIndex:int):
            if predIndex == 2:
                return self.CheckVersion(2)
         

            if predIndex == 3:
                return self.CheckVersion(2)
         

            if predIndex == 4:
                return self.CheckVersion(3)
         

    def assign_part_sempred(self, localctx:Assign_partContext, predIndex:int):
            if predIndex == 5:
                return self.CheckVersion(3)
         

    def logical_test_sempred(self, localctx:Logical_testContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def comparison_sempred(self, localctx:ComparisonContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         




